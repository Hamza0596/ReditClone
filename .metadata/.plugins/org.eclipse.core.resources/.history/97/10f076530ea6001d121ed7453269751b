package com.Redit.clone.security;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.Key;
import java.security.KeyStore;
import java.security.KeyStore.LoadStoreParameter;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;

import javax.annotation.PostConstruct;

import org.apache.tomcat.util.net.openssl.ciphers.Authentication;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec;
import org.springframework.stereotype.Service;

import com.Redit.clone.Exceptions.SpringRedditException;
import com.auth0.json.mgmt.users.User;

import io.jsonwebtoken.Jwts;

@Service
public class JwtProvider {
	private KeyStore keyStore;
	
	
	@PostConstruct
	public void init() {
	try {
		KeyStore keyStore = KeyStore.getInstance("JKS");
		keyStore.load((LoadStoreParameter) new FileInputStream("springblog.jks"));
	}catch (KeyStoreException |CertificateException| NoSuchAlgorithmException| IOException e) {
	throw new SpringRedditException (" ExCeption occurred while loading keystore ");
	}
	}
	
	
	public String generateToken (org.springframework.security.core.Authentication authentication) {
		System.out.println(authentication.getPrincipal());

		org.springframework.security.core.userdetails.User principal=  (org.springframework.security.core.userdetails.User) authentication.getPrincipal();
		return Jwts.builder()
				.setSubject(principal.getUsername())
				.signWith(getPrivateKey())
				.compact();
	}


	private PrivateKey getPrivateKey() {
		try {
		return (PrivateKey) keyStore.getKey("springblog","secret".toCharArray());
				}
		catch (KeyStoreException| NoSuchAlgorithmException |UnrecoverableKeyException e) {
		throw new SpringRedditException ("Exception ocCured while retrieving public key from keystore")	;	
	}
	}
}
